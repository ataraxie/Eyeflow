<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <startup>
      <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5"/>
    </startup>
    <appSettings>

      <!-- =============================================================================================== -->
      <!-- =============================================================================================== -->
      <!-- ==================================== BEGIN: USER PROPERTIES =================================== -->
      <!-- ================================= FEEL FREE TO CHANGE THESE SETTINGS ========================== -->
      <!-- =============================== (CHANGE REQUIRES A RESTART OF THE APP) ======================== -->
      <!-- =============================================================================================== -->
      <!-- =============================================================================================== -->
      
      <!--
      Defines how much time in ms a window must be under gaze before it becomes highlighted.
      For example, a value of 1000 defines that a window must be under gaze for one second before
      it becomes highlighted. This avoids highlighting windows where the user's gaze just "flies over".
      
      value: integer indicating how much time in ms a window must be under gaze before it becomes highlighted.
      default: 300
      -->
      <add key="gazeTimeRequiredForHighlightMs" value="300" />
      
      <!--
      If this property is used (meaning it's set to >= 0), windows that are under gaze will be
      brought to the foreground, enabling immediate keyboard input. The number of this value indicates
      how much time (in milliseconds) a window must be gazed at until it is brought to the foreground.
      For example, a value of 1000 specifies that the window is only brought to the foreground if it is
      gazed upon for 1 second. If set to -1 bringing windows to the foreground is disabled. If set to
      0, windows are immediately brought to the foreground (i.e. at the same time as highlighted).
      
      Note: this time is applied on top of the time a window needs for highlighting
      (see gazeTimeRequiredForHighlightMs), i.e. the timer is started when a window gets highlighted.
      
      value: integer indicating time in ms a window must have gaze until it is brought to the foreground
        (-1 disables bringing windows to the foreground)
      default: -1
      -->
      <add key="windowToForegroundOnGazeAfterMs" value="-1" />

      <!--
      Defines how many windows will be highlighted at the same time. Set to 1 will always only
      show the window under gaze and (with the timeout defined with windowInactiveThresholdMs)
      hide all other windows. If set to 2, the window gazed at before the currently active window
      won't be hidden. If set to 3, the two windows gazed at before the currently active window
      won't be hidden, etc.
      
      value: integer indicating how many windows should be visible.
      default: 1
      -->
      <add key="howManyHighlightedConcurrentWindows" value="1" />
      
      <!--
      Defines after what time windows being without gaze are made transparent.
      
      value: integer for ms after which windows should be set inactive
      default: 10000
      -->
      <add key="windowInactiveThresholdMs" value="10000" />
      
      <!--
      Defines the interval for fade out animations indicating when the next transparency
      change should be triggered. Effectively controls the speed of the animation in
      combination with fadeOutAnimationTransparencyInterval.
      
      value: integer for ms interval for fade out animation
      default: 20
      -->
      <add key="fadeOutAnimationTimeIntervalMs" value="20" />
      
      <!-- 
      Defines the decrease in transparency for each animation step. Effectively 
      controls the speed of the animation in combination with 
      fadeOutAnimationTransparencyInterval. For example, with a number of 20, the
      transparency will be decreased like this: 255, 235, 215, etc. until
      fadeOutAnimationMinTransparency is met.
      
      value: integer for the decrease of transparency of each interval
      default: 10
      -->
      <add key="fadeOutAnimationTransparencyInterval" value="10" />
      
      <!--
      Defines at what transparency the animation will stop, i.e. when a window
      is hidden.
      
      value: integer (0-255) for the minimum transparency number for windows
      default: 40
      -->
      <add key="fadeOutAnimationMinTransparency" value="40" />

      
      <!-- =============================================================================================== -->
      <!-- =============================================================================================== -->
      <!-- ==================================== BEGIN: ADMIN PROPERTIES ================================== -->
      <!-- ================================= DO NOT CHANGE THE VALUES BELOW ============================== -->
      <!-- =============================================================================================== -->
      <!-- =============================================================================================== -->

      <!--
      The global timer checks for each window how long it has been inactive and
      acts accordingly.
      
      value: integer specifying ms time interval for the global check timer.
      default: 1000
      -->
      <add key="globalCheckTimerInterval" value="1000" />
      
      <!--
      Events are dispatched from the eyetracker libraries for gaze measurements.
      Since these occur very frequently and may overwhelm the application, this number
      can be used to specify on which X dispatch action should be triggered. E.g.
      a number of 10 will make the app run on the first dispatch, then skip 9, 
      run again, skip 9, etc. A nummer of 1 will run on every dispatch.
      
      value: integer indicating how often gaze dispatches from the eye tracker should be used.
      default: 1
      -->
      <add key="runOnEveryXGazeDispatch " value="1" />

      <!--
      This is for debugging purposes only. If enabled, rectangles are drawn on the
      screen for every trigger of the global timer. These rectangles can currently
      only be removed properly by logging out from Windows, so use it only carefully.
      
      value: boolean indicating if rectangles should be drawn
      default: false
      -->
      <add key="drawGazePositionRectangles" value="false" />
      
      <!--
      Defines in which color rectangles are drawn if drawGazePositionRectangles
      is enabled.
      
      value: string for the color of the rectangles drawn
      default: blue
      -->
      <add key="gazePositionColor" value="blue" />

      <!--
      The log file will be created if not available. New lines are appended to the
      existing file. Relative paths base on the current runtime directory (where the
      .exe resides).
      
      value: string for the path of the log file
      default: application.log
      -->
      <add key="logFilePath" value="eyeflow.log" />

      <!--
      Defines if output is printed to the console (additionally to the log file)
      
      value: boolean indicating whether logging output should also be printed to the console window
      default: true
      -->
      <add key="logToConsole" value="true" />
      
      <!--
      Defines if timestamp, class name and log level should be printed for each log statement.
      
      value: boolean indicating whether meta information (time, class name) should be logged for each statement
      default: true
      -->
      <add key="logShowMetaInfo" value="true" />

      <!--
      Defines the amount of information written to the log file (and the console if logToConsole is
      set to true)
      
      value: string ("error|warn|info|debug") indicating the log level
      default: info
      -->
      <add key="logLevel" value="info" />

      <!--
      If this is set to "true", the application will run in "dummy mode", meaning no windows
      will be highlighted or focused on gaze. This essentially means that the app just tracks the
      names of the windows under gaze.
      
      value: boolean indicating whether the app should run in "dummy mode"
      default: false
      -->
      <add key="simulationMode" value="false" />
      
    </appSettings>
</configuration>
