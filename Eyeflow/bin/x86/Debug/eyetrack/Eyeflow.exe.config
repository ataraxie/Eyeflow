<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <startup>
      <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5"/>
    </startup>
    <appSettings>
      <!-- 
      value: integer specifying ms time interval for the global check timer.
      default: 1000
      The global timer checks for each window how long it has been inactive and
      acts accordingly. -->
      <add key="globalCheckTimerInterval" value="1000" />
      <!--
      value: integer indicating how often gaze dispatches from the eye tracker should be used.
      default: 1
      Events are dispatched from the eyetracker libraries for gaze measurements.
      Since these occur very frequently and may overwhelm the application, this number
      can be used to specify on which X dispatch action should be triggered. E.g.
      a number of 10 will make the app run on the first dispatch, then skip 9, 
      run again, skip 9, etc. A numbmer of 1 will run on every dispatch.
      -->
      <add key="runOnEveryXGazeDispatch " value="1" />
      <!--
      value: integer indicating many windows should be visible.
      default: 1
      Defines how many windows will be highlighted at the same time. Set to 1 will always only
      show the window under gaze and (with the timeout defined with windowInactiveThresholdMs)
      hide all other windows. If set to 2, the window gazed at before the currently active window
      won't be hidden. If set to 3, the two windows gazed at before the currently active window
      won't be hidden, etc.
      -->
      <add key="howManyActiveConcurrentWindows" value="2" />
      <!-- 
      value: boolean indicating whether windows should be brought to the foreground upon gaze.
      default: false
      This will activate windows under gaze which also implies that the cursor will move
      to that window enabling immediate keyboard input.
      -->
      <add key="windowToForegroundOnGaze" value="false" />
      <!-- 
      value: integer for ms after which windows should be set inactive
      default: 8000
      Defines after what time windows being without gaze are made transparent.
      -->
      <add key="windowInactiveThresholdMs" value="5000" />
      <!-- 
      value: integer for ms interval for fade out animation
      default: 20
      Defines the interval for fade out animations indicating when the next transparency
      change should be triggered. Effectively controls the speed of the animation in
      combination with fadeOutAnimationTransparencyInterval.
      -->
      <add key="fadeOutAnimationTimeIntervalMs" value="20" />
      <!-- 
      value: integer for the decrease of transparency of each interval
      default: 10
      Defines the decrease in transparency for each animation. Effectively 
      controls the speed of the animation in combination with 
      fadeOutAnimationTransparencyInterval. For example, with a number of 10, the
      transparency will be decreased like this: 255, 235, 215, etc. until
      fadeOutAnimationMinTransparency is met.
      -->
      <add key="fadeOutAnimationTransparencyInterval" value="10" />
      <!-- 
      value: integer (0-255) for the minimum transparency number for windows
      default: 40
      Defines at what transparency the animation will stop, i.e. when a window
      is hidden.
      -->
      <add key="fadeOutAnimationMinTransparency" value="40" />
      <!-- value: boolean indicating if rectangles should be drawn
      default: false
      This is for debugging purposes only. If enabled, rectangles are drawn on the
      screen for every trigger of the global timer. These rectangles can currently
      only be removed properly by logging out from Windows, so use it only carefully.
      -->
      <add key="drawGazePositionRectangles" value="false" />
      <!-- value: string for the color of the rectangles drawn
      default: blue
      Defines in which color rectangles are drawn if drawGazePositionRectangles
      is enabled.
      -->
      <add key="gazePositionColor" value="blue" />
      <!-- value: string for the path of the log file
      default: eyeflow.log
      The log file will be created if not available. New lines are appended to the
      existing file. Relative paths base on the current runtime directory (where the
      .exe resides).
      -->
      <add key="logFilePath" value="eyeflow.log" />
      <!-- value: string ("error|warn|info|debug") indicating the log level
      default: info
      -->
      <add key="logLevel" value="warn" />
      <!-- value: boolean indicating whether logging output should also be printed to the console window
      default: true
      -->
      <add key="logToConsole" value="true" />
      <!-- value: boolean indicating whether meta information (time, class name) should be logged for each statement
      default: true
      -->
      <add key="logShowMetaInfo" value="true" />
    </appSettings>
</configuration>
